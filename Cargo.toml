#! Cargo.toml
[package]
name = "newsletter"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
# We could use any path here, but we are following the community convention
# We could specify a library name using the `name` field. If unspecified,
# cargo will default to `package.name`, which is what we want.
path = "src/lib.rs"
# Notice the double square brackets: it's an array in TOML's syntax.
# We can only have one library in a project, but we can have multiple binaries!
# If you want to manage multiple libraries in the same repository
# have a look at the workspace feature - we'll cover it later on.
[[bin]]
path = "src/main.rs"
name = "newsletter"

# Dev dependencies are used exclusively when running tests or examples
# They do not get included in the final application binary!
[dev-dependencies]
reqwest = "0.11"

[dependencies]
actix-web = "4.0.0"
chrono = "0.4.15"
config = "0.11"
once_cell = "1"
secrecy = { version = "0.8", features = ["serde"] }
# We need the optional `derive` feature to use `serde`'s procedural macros:
# `#[derive(Serialize)]` and `#[derive(Deserialize)]`.
# The feature is not enabled by default to avoid pulling in
# unnecessary dependencies for projects that do not need it.
serde = { version = "1", features = ["derive"]}
serde-aux = "3"
tokio = { version = "1", features = ["macros", "rt-multi-thread"] }
tracing = { version = "0.1", features = ["log"] }
tracing-actix-web = "0.5"
tracing-bunyan-formatter = "0.3"
tracing-log = "0.1"
tracing-subscriber = { version = "0.3", features = ["registry", "env-filter"] }
unicode-segmentation = "1"
uuid = { version = "0.8.1", features = ["v4"] }

# Using table-like toml syntax to avoid a super-long line!
[dependencies.sqlx]
version = "0.5.7"
default-features = false
features = [
    # tells sqlx to use the actix runtime for its futures and rustls as TLS
    # backend
    "runtime-actix-rustls",
    # gives us access to sqlx::query! and sqlx::query_as!, which we will be using exten-
    # sively
    "macros",
    # unlocks Postgres-specific functionality (e.g. non-standard SQL types)
    "postgres",
    # adds support for mapping SQL UUIDs to the Uuid type from the uuid crate. We need it
    # to work with our id column
    "uuid",
    # adds support for mapping SQL timestamptz to the DateTime<T> type from the chrono
    # crate. We need it to work with our subscribed_at column
    "chrono",
    # gives us access to the same functions used under the hood by sqlx-cli to manage
    # migrations. It will turn out to be useful for our test suite.
    "migrate",
    "offline"
]
